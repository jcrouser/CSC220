addPolylines(data = macleish_layers[["boundary"]], weight = 2, color = "green") %>%
addPolylines(data = macleish_layers[["trails"]], weight = 3, color = "red") %>%
addCircleMarkers(data = trail_points, radius = 2, color = "red")
m
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
library(dplyr)
library(rgdal)
library(rgeos)
library(macleish)
mac <- etl("macleish") %>%
etl_update()
# Download terrain data for Whatley
url <- "http://wsgw.mass.gov/data/gispub/shape/contours5k/hp337.zip"
download.file(url, destfile = basename(url))
unzip("hp337.zip", exdir = "whately_contours")
# Load and transform
whately_GIS_data <- path.expand("whately_contours")
whately_contours <- readOGR(whately_GIS_data, "hp337") %>%
spTransform(CRS("+init=epsg:4326"))
# Download terrain data for Conway
url <- "http://wsgw.mass.gov/data/gispub/shape/contours5k/hp68.zip"
download.file(url, destfile = basename(url))
unzip("hp68.zip", exdir = "conway_contours")
# Load and transform
conway_GIS_data <- path.expand("conway_contours")
conway_contours <- readOGR(conway_GIS_data, "hp68") %>%
spTransform(CRS("+init=epsg:4326"))
# Merge the contours for both towns, then intersect with the boundary of Macleish
macleish_contours <-
gUnion(conway_contours, whately_contours) %>%
gIntersection(macleish_layers[['boundary']])
# They're huuuuuge, so let's delete the rest
# of the contours now that we have what we want
remove(whately_contours, conway_contours)
# What happens when you intersect lines?
trail_points <- macleish_contours %>%
gIntersection(macleish_layers[['trails']])
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = macleish_contours, weight = 1, color = "black") %>%
addPolylines(data = macleish_layers[["boundary"]], weight = 2, color = "green") %>%
addPolylines(data = macleish_layers[["trails"]], weight = 3, color = "red") %>%
addCircleMarkers(data = trail_points, radius = 2, color = "red")
m
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
library(dplyr)
library(rgdal)
library(rgeos)
library(macleish)
mac <- etl("macleish") %>%
etl_update()
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
library(dplyr)
library(rgdal)
library(rgeos)
library(macleish)
mac <- etl("macleish") %>%
etl_update()
# Download terrain data for Whatley
url <- "http://wsgw.mass.gov/data/gispub/shape/contours5k/hp337.zip"
download.file(url, destfile = basename(url))
unzip("hp337.zip", exdir = "whately_contours")
# Load and transform
whately_GIS_data <- path.expand("whately_contours")
whately_contours <- readOGR(whately_GIS_data, "hp337") %>%
spTransform(CRS("+init=epsg:4326"))
# Download terrain data for Conway
url <- "http://wsgw.mass.gov/data/gispub/shape/contours5k/hp68.zip"
download.file(url, destfile = basename(url))
unzip("hp68.zip", exdir = "conway_contours")
# Load and transform
conway_GIS_data <- path.expand("conway_contours")
conway_contours <- readOGR(conway_GIS_data, "hp68") %>%
spTransform(CRS("+init=epsg:4326"))
# Merge the contours for both towns, then intersect with the boundary of Macleish
macleish_contours <-
gIntersection(conway_contours, macleish_layers[['boundary']]) %>%
gUnion(gIntersection(whately_contour, macleish_layers[['boundary']]))
# Merge the contours for both towns, then intersect with the boundary of Macleish
macleish_contours <-
gIntersection(conway_contours, macleish_layers[['boundary']]) %>%
gUnion(gIntersection(whately_contours, macleish_layers[['boundary']]))
# They're huuuuuge, so let's delete the rest
# of the contours now that we have what we want
remove(whately_contours, conway_contours)
?SpatialLinesDataFrame
?SpatialPolygonsDataFrame
install.packages('partykit')
knitr::opts_chunk$set(echo = TRUE)
library(partykit)
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
text(homeless.rpart)
library(rpart)
ds$sub = as.factor(ds$substance)
homeless.rpart = rpart(homeless ~ female + i1 + sub + sexrisk + mcs +
pcs, method="class", data=ds)
plot(homeless.rpart)
text(homeless.rpart)
plot(homeless.rpart)
plot(as.party(homeless.rpart), type="simple")
plot(as.party(homeless.rpart))
tree = partykit::ctree(homeless ~ female + i1 + sub + sexrisk + mcs +
pcs, method="class", data=ds)
tree = partykit::ctree(homeless ~ female + i1 + sub + sexrisk + mcs +
pcs, data=ds)
plot(tree)
plot(tree, tp_args = list(text = TRUE))
partykit::plot(tree, tp_args = list(text = TRUE))
?plot
?plot.modelparty
plot.modelparty(tree, tp_args = list(text = TRUE))
plot.modelparty(tree)
vignette("ctree", package = "partykit")
library(partykit)
data("WeatherPlay", package = "partykit")
WeatherPlay
sp_o <- partysplit(1L, index = 1:3)
sp_h <- partysplit(3L, breaks = 75)
sp_w <- partysplit(4L, index = 1:2)
pn <- partynode(1L, split = sp_o, kids = list(
+ partynode(2L, split = sp_h, kids = list(
+ partynode(3L, info = "yes"),
+ partynode(4L, info = "no"))),
+ partynode(5L, info = "yes"),
+ partynode(6L, split = sp_w, kids = list(
+ partynode(7L, info = "yes"),
+ partynode(8L, info = "no")))))
pn <- partynode(1L, split = sp_o, kids = list(
partynode(2L, split = sp_h, kids = list(
partynode(3L, info = "yes"),
partynode(4L, info = "no"))),
partynode(5L, info = "yes"),
partynode(6L, split = sp_w, kids = list(
partynode(7L, info = "yes"),
partynode(8L, info = "no")))))
pn
py <- party(pn, WeatherPlay)
py
plot(py)
print(py, terminal_panel = function(n) c(", then the play decision is:", toupper(n$info)))
plot(py, tp_args = list(FUN = function(i) c("Play decision:", toupper(i))))
type(py)
typeof(py)
plot(as.constparty(py), tp_args = list(FUN = function(i) c("Play decision:", toupper(i))))
py
py[8]
summary(py[8])
summary(py[8][1])
py[8][1]
py[8]
py[1]
py[2]
py[3]
py[1]
R.version
plot(py, tp_args = list(FUN = function(i) c("Play decision:", toupper(i))))
plot(py, terminal_panel = node_terminal, tp_args = list(FUN = function(i) c("Play decision:", toupper(i))))
plot(py, terminal_panel = node_terminal)
plot(py, terminal_panel = node_terminal, tp_args = list(FUN = function(i) toupper(i)))
plot(py, terminal_panel = node_terminal)
library(dplyr)
library(readr)
hate_crimes <- read_csv("hate_crimes.csv")
library(dplyr)
library(readr)
hate_crimes <- read_csv("../Documents/hate_crimes.csv")
View(hate_crimes)
knitr::opts_chunk$set(echo = TRUE)
View(Wage)
View(wage)
library(ISLR)
library(ggplot2)
View(wage)
View(Wage)
head(Wage)
?ggplot
ggplot(data = Wage) + geom_scatter(aes(x = age, y = wage))
ggplot(data = Wage) + geom_point(aes(x = age, y = wage))
install.packages('ggplotly')
install.packages('plotly')
library(ISLR)
library(ggplot2)
library(plotly)
?ggplotly
clear
?ISLR
library(ISLR)
?ISLR
?Carseats
install.packages(c('repr', 'IRdisplay', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('ISLR')
install.packages("ISLR")
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
sudo xcodebuild -license
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('jupyter-client')
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
install.packages(c("assertthat", "babynames", "backports", "BH", "boot", "car", "cluster", "curl", "DBI", "dplyr", "epitools", "etl", "fivethirtyeight", "foreign", "formatR", "Formula", "FSA", "gdata", "GGally", "ggthemes", "git2r", "gridExtra", "haven", "htmltools", "httpuv", "httr", "igraph", "irlba", "knitr", "lattice", "lme4", "markdown", "MASS", "Matrix", "memoise", "mgcv", "modelr", "mosaic", "nlme", "openssl", "plotrix", "psych", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "scales", "sciplot", "shiny", "sourcetools", "sp", "SparseM", "stringi", "survival", "tibble", "tidyquant", "tidyr", "tseries", "TTR", "withr", "xts", "zoo"))
version
library(ISLR)
head(Smarket)
require(knitr)
opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
pairs(diamonds)
?pairs
devtools::install_github("rstats-db/odbc")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
odbc::odbcListDrivers()
library(RMySQL)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# Show all tables in the database
dbListTables(yelp_db)
library(RMySQL)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# Show all tables in the database
dbListTables(yelp_db)
library(RMySQL)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# Show all tables in the database
dbListTables(yelp_db)
# Get the first 10 rows from the 'review' table
dbSendQuery(yelp_db, "SELECT * FROM 'attribute' LIMIT 10";)
# Get the first 10 rows from the 'review' table
dbSendQuery(yelp_db, "SELECT * FROM 'attribute' LIMIT 10;")
# Get the first 10 rows from the 'review' table
dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT 10;")
results = dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT 10;")
dbFetch(results)
dbClearResult(results)
library(RMySQL)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# Show all tables in the database
dbListTables(yelp_db)
# Get the first 10 rows from the 'review' table
results = dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT 10;")
dbFetch(results)
dbClearResult(results)
results = dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT 10;")
results_df = dbFetch(results)
dbClearResult(results)
View(results_df)
View(results_df)
# Get the first 10 rows from the 'review' table
results_df = dbFetch(dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT 10;"))
# Flush the results
dbClearResult(results)
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
# Show all fields in the 'business' table
dbListFields(yelp_db, 'business')
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
install.packages('RMariaDB')
install.packages('DBI')
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQLite Driver};user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu'")
library(RMySQL)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
library(RMariaDB)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
dbGetRowCount(yelp_db, 'business')
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
?`dbGetRowCount,MariaDBResult-method`
# ---------------------
# Actually getting data
# ---------------------
# Get the first 10 rows from the 'review' table
results = dbSendQuery(yelp_db, "SELECT * FROM attribute;")
library(RMariaDB)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
# Show all fields in the 'business' table
dbListFields(yelp_db, 'business')
# ---------------------
# Actually getting data
# ---------------------
# Get the first 10 rows from the 'review' table
results = dbSendQuery(yelp_db, "SELECT * FROM attribute;")
dbGetRowCount(results)
# Read data into a DataFrame
results_df = dbFetch(results)
View(results_df)
View(results_df)
# ---------------------
# Actually getting data
# ---------------------
# Get the first 10 rows from the 'review' table
results = dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT NONE;")
# Good housekeeping: flush the connection when we're done
dbClearResult(results)
# ---------------------
# Actually getting data
# ---------------------
# Get the first 10 rows from the 'review' table
results = dbSendQuery(yelp_db, "SELECT * FROM attribute LIMIT NONE;")
library(RMariaDB)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
dbGetInfo(yelp_db)
devtools::install_github("rstats-db/odbc")
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = scidb.smith.edu,
Database  = sds293,
UID       = sds293,
PWD       = Fall2017,
Port      = 3306)
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "scidb.smith.edu",
Database  = "sds293"",
UID       = "sds293",
PWD       = "Fall2017"",
Port      = 3306)
con <- DBI::dbConnect(odbc::odbc(),
Driver    = "SQL Server",
Server    = "scidb.smith.edu",
Database  = "sds293",
UID       = "sds293",
PWD       = "Fall2017",
Port      = 3306)
library(RMariaDB)
yelp_db = dbConnect(MySQL(),
user='sds293',
password='Fall2017',
dbname='sds293',
host='scidb.smith.edu')
# --------------
# Looking around
# --------------
# Show all tables in the database
dbListTables(yelp_db)
digits <- read.csv("~/Google Drive/Teaching/Course Material/SDS293 - Intro. to Statistical Learning/labs/lab15/digits.csv", header=FALSE)
View(digits)
digits <- read.csv("~/Google Drive/Teaching/Course Material/SDS293 - Intro. to Statistical Learning/labs/lab15/digits.csv")
View(digits)
m = matrix(digits[1,-1],16,16)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
image(m)
?image
?matrix
is.matrix(m)
View(m)
digits[1,-1]
type(digits[1,-1])
typeof(digits[1,-1])
m = matrix(digits[1,-1].unlist(),16,16)
?unlist
m = matrix(unlist(digits[1,-1]),16,16)
image(m)
m = matrix(unlist(digits[1,-1]),16,16, byrow = TRUE)
image(m)
m = matrix(unlist(digits[11,-1]),16,16)
image(m)
m = matrix(unlist(digits[100,-1]),16,16)
image(m)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
m = matrix(unlist(digits[1,-1]),16,16)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
m = matrix(unlist(digits[1,-1]),8,8)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
install.packages('optd')
install.packages('geosphere')
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC250/CSC250-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC220/CSC220-website")
#render site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/jcrouser/Google Drive/Teaching/Course Material/CSC220/CSC220-website")
#render site.
rmarkdown::render_site()
